<?php

add_action(	'mp_action_add_user_fo',	array('MP_User','mp_action_add_user_fo'));

// for recipients meta

add_filter('MailPress_get_recipients',	array('MP_User','get_meta_recipients'),8,2);

// for ajax admin

add_action(	'mp_action_dim-user',		array('MP_User','mp_action_dim_user'));
add_action(	'mp_action_delete-user',	array('MP_User','mp_action_delete_user'));
add_action(	'mp_action_add-user',		array('MP_User','mp_action_add_user'));

// for links in mails

add_action(	'mp_action_mail_link',		array('MP_User','mp_action_mail_link'));

// for comments

if (isset($mp_general['subcomment']))
{
	add_action( 'comment_form',			array('MP_User','comment_form'));
	add_action( 'comment_post',			array('MP_User','comment_post'), 8, 1);
	add_action('wp_set_comment_status',		array('MailPress','approve_comment'));			
}

class MP_User
{

////	subscription form	////

	public static function form($options=false) {
		global $user_ID;
		$email = $message = $widget_title = '';
		if (!$options) $options = array();

		$options  = MailPress::form_defaults($options);

		switch (true)
		{
			case (isset($_POST['MailPress_submit'])) :
				$bots_useragent = array('googlebot', 'google', 'msnbot', 'ia_archiver', 'lycos', 'jeeves', 'scooter', 'fast-webcrawler', 'slurp@inktomi', 'turnitinbot', 'technorati', 'yahoo', 'findexa', 'findlinks', 'gaisbo', 'zyborg', 'surveybot', 'bloglines', 'blogsearch', 'ubsub', 'syndic8', 'userland', 'gigabot', 'become.com');
				$useragent = $_SERVER['HTTP_USER_AGENT'];
				foreach ($bots_useragent as $bot) if (stristr($useragent, $bot) !== false) return false;				// goodbye bot !

				$email = ( isset($_POST['email']) ) ? $_POST['email'] : '';									//has the user entered an email 

				if ( '' == $email || $options['txtfield'] == $email ) 
				{																		// check for bot
					$message = "<span class='error'>" . $options['txtwait'] . "</span>";
					$email = $options['txtfield'];
				}
				else
				{
					$add = MP_User::add($email);
					$shortcode_message = apply_filters('MailPress_form_submit','',$email);
					$message = ($add['result']) ? "<span class='success'>" . $add['message'] . $shortcode_message . "</span><br/>" : "<span class='error'>" . $add['message']  . $shortcode_message . "</span><br/>";
					$email   = ($add['result']) ? $email : $options['txtfield'];
				}
			break;
			case ($user_ID != 0 && is_numeric($user_ID) ) :
				$user = get_userdata($user_ID);
				$email = $user->user_email;
				if ( MP_User::is_user($email,$user_ID) ) $email = ''; 
			break;
			default :
				$email  = $_COOKIE['comment_author_email_' . COOKIEHASH];
				if ( MP_User::get_status_by_email($email) == 'active' ) $email='';
			break;
		}

		if ('' == $email) $email = $options['txtfield'];

?>
<!-- start of code generated by MailPress -->
<style type='text/css'> div#MailPress div#mp-container, div#MailPress div#mp-formdiv {position:relative;} div#MailPress div#mp-loading, div#MailPress div#mp-message {position:absolute;opacity:0;} div#MailPress div#mp-loading, div#MailPress div#mp-message {filter:alpha(opacity=0);}</style>

<?php if (!$options['jQ']) : ?><script type='text/javascript' src='<?php echo get_option('siteurl'); ?>/wp-includes/js/jquery/jquery.js?ver=1.2.3'></script><?php endif; ?>
<script type='text/javascript'> var mp_url = '<?php echo get_option('siteurl'); ?>/<?php echo MP_PATH; ?>mp-includes/action.php'; </script>
<script type='text/javascript' src='<?php echo get_option('siteurl'); ?>/<?php echo MP_PATH; ?>mp-includes/js/form.js'></script>
<div id='MailPress'>
	<div id='mp-container'>
		<div id='mp-message'></div>
		<div id='mp-loading'>
			<img src='<?php echo get_option('siteurl'); ?>/<?php echo MP_PATH; ?>mp-includes/images/loading.gif' alt='<?php  echo $options['txtloading']; ?>' title='<?php  echo $options['txtloading']; ?>' />
			<?php  echo $options['txtloading']; ?>
		</div>
		<div id='mp-formdiv'>
			<?php if ('' != $message) echo $message; ?>
			<form id='mp-form' method='post' action=''>
				<input 					type='hidden' 			name='action' 		value='add_user_fo' />
				<input class='MailPressFormEmail' 	type='text'   			name='email'  		value='<?php echo $email; ?>' size='25' />
<?php do_action('MailPress_form',$email,$options); ?>
				<input class='MailPressFormSubmit'	type='submit' id='submit'  	name='MailPress_submit' value="<?php echo htmlentities(stripslashes($options['txtbutton']),ENT_QUOTES); ?>" />
			</form>
		</div>
	</div>
<?php 
$url = ($options['urlsubmgt']) ? MP_User::get_wp_user_unsubscribe_url() : false;
if ($url) :
?>
	<div id='mp-urlsubmgt'><a href='<?php echo $url; ?>'><?php echo htmlentities(stripslashes($options['txtsubmgt']),ENT_QUOTES); ?></a></div>
<?php
endif;
?>
</div>
<!-- end of code generated by MailPress -->
<?php
	}

////	comment subscription form	////

	public static function comment_form($postid) {
		global $wpdb, $mp_general;
		$checked = '';
		$defaults = MailPress::form_defaults();

		if (isset($mp_general['subcomment']))
		{
			$email = MailPress::get_wp_user_email();

			if (MailPress::is_email($email))
			{
				$i = MP_User::get_id_by_email($email);
				if ($i)
				{
					$x = $wpdb->get_var("SELECT meta_id FROM $wpdb->postmeta WHERE post_id = $postid and meta_key = '_MailPress_subscribe_to_comments_' AND meta_value = '$i';");
					if ($x) $checked = "checked='checked'";
				}
			}
?>
<!-- start of code generated by MailPress -->
<div class='MailPressCommentform' style='clear:both;'>
	<input class='MailPressCommentformCheckbox' name='MailPress[subscribe_to_comments]' type='checkbox' <?php echo $checked; ?> style='margin:0;padding:0;width:auto;'/>
	<span><?php echo $defaults['txtsubcomment']; ?></span>
</div>
<!-- end of code generated by MailPress -->
<?php
		}
	}

////	processing comment subscription form	////

	public static function comment_post($id) {
		global $wpdb, $comment;

		$comment 	= $wpdb->get_row("SELECT * FROM $wpdb->comments WHERE comment_ID = $id LIMIT 1");
		$postid 	= $comment->comment_post_ID;

		$email 	= MailPress::get_wp_user_email();

		if (MailPress::is_email($email))
		{
			$i = MP_User::get_id_by_email($email);
			if ($i)
			{
				$x = $wpdb->get_var("SELECT meta_id FROM $wpdb->postmeta WHERE post_id = $postid and meta_key = '_MailPress_subscribe_to_comments_' AND meta_value = '$i';");
				if ($x)
				{
					if (!isset($_POST['MailPress']['subscribe_to_comments'])) 
					{
						delete_post_meta($postid,'_MailPress_subscribe_to_comments_',$i);
						MailPress::update_stats('c',$postid,-1);
					}
				}
				else
				{
					if (isset($_POST['MailPress']['subscribe_to_comments'])) 
					{
						add_post_meta($postid,'_MailPress_subscribe_to_comments_',$i);
						MailPress::update_stats('c',$postid,1);
					}
				}
			}
			else
			{
				if (isset($_POST['MailPress']['subscribe_to_comments']))
				{
					if (MP_User::insert($email))
					{
						$i = MP_User::get_id_by_email($email);

						add_post_meta($postid,'_MailPress_subscribe_to_comments_',$i);
						MailPress::update_stats('c',$postid,1);
					}
				}
			}
		}

		if ('1' == $comment->comment_approved) MailPress::approve_comment($id);
	}





////	MP_User user functions	////
////	MP_User user functions	////
////	MP_User user functions	////

	public static function &get(&$user, $output = OBJECT) {
		global $wpdb;

		switch (true)
		{
			case ( empty($user) ) :
				if ( isset($GLOBALS['mp_user']) ) 	$_user = & $GLOBALS['mp_user'];
				else						$_user = null;
			break;
			case ( is_object($user) ) :
				wp_cache_add($user->id, $user, 'mp_user');
				$_user = $user;
			break;
			default :
				if ( isset($GLOBALS['mp_user']) && ($GLOBALS['mp_user']->id == $user) ) 
				{
					$_user = & $GLOBALS['mp_user'];
				} 
				elseif ( ! $_user = wp_cache_get($user, 'mp_user') ) 
				{
					$_user = $wpdb->get_row($wpdb->prepare("SELECT * FROM $wpdb->mp_users WHERE id = %d LIMIT 1", $user));
					wp_cache_add($_user->id, $_user, 'mp_user');
				}
			break;
		}

		if ( $output == OBJECT ) {
			return $_user;
		} elseif ( $output == ARRAY_A ) {
			return get_object_vars($_user);
		} elseif ( $output == ARRAY_N ) {
			return array_values(get_object_vars($_user));
		} else {
			return $_user;
		}
	}

	public static function insert($email,$key=false, $status='waiting') {
		global $wpdb;

		MailPress::update_stats('u','waiting',1);
		if ('active' == $status) MailPress::update_stats('u','active',1);

		if ($key === false)
		{
		 	$key = md5(uniqid(rand(),1));	
			MailPress::update_stats('u','comment',1);
		}

		$now	  	= date('Y-m-d H:i:s');
		$userid 	= MailPress::get_wp_user_id();
		$ip		= $_SERVER['REMOTE_ADDR'];
		$agent	= trim(strip_tags($_SERVER['HTTP_USER_AGENT']));

		$ip2country = MP_User::get_ip2country($ip);

		$ip2USstate = ('US' == $ip2country) ? MP_User::get_ip2USstate($ip) : 'ZZ' ;

		$query = "INSERT INTO $wpdb->mp_users (email, status, confkey, created, created_IP, created_agent, created_user_id, created_country, created_US_state) ";
		$query .= "VALUES ('$email','$status','$key', '$now', '$ip', '$agent', $userid, '$ip2country', '$ip2USstate');";
      	$results = $wpdb->query( $query );

		do_action('MailPress_insert_user',MP_User::get_id_by_email($email));

		return ('' != $results);
	}

	public static function activate($id) {
		global $wpdb;
		
		$query  = "SELECT * FROM $wpdb->mp_users WHERE id='$id';";
		$result = $wpdb->get_row( $query );
		$now	  = date('Y-m-d H:i:s');

		if ( $result && 'waiting' == $result->status )
		{
			MailPress::update_stats('u','active',1);
			if (MP_User::has_subscribed_to_comments($id)) MailPress::update_stats('u','comment',-1);

			$userid 	= MailPress::get_wp_user_id();
			$ip		= $_SERVER['REMOTE_ADDR'];
			$agent	= trim(strip_tags($_SERVER['HTTP_USER_AGENT']));

			$query = "UPDATE $wpdb->mp_users SET status = 'active', laststatus = '$now', laststatus_IP = '$ip', laststatus_agent = '$agent', laststatus_user_id = $userid WHERE id='$id';";
			$results = $wpdb->query( $query );

			

			if ($results == 1) 	{ MailPress::send_succesfull_subscription($result->email,$result->confkey); return $now;}
			else 				return false;
		}
		return true;
	}

	public static function deactivate($id) {
		global $wpdb;
		
		$query  = "SELECT * FROM $wpdb->mp_users WHERE id='$id';";
		$result = $wpdb->get_row( $query );
		$now	  = date('Y-m-d H:i:s');

		if ( $result && 'active' == $result->status )
		{
			MailPress::update_stats('u','active',-1);
			if (MP_User::has_subscribed_to_comments($id)) MailPress::update_stats('u','comment',1);

			$userid 	= MailPress::get_wp_user_id();
			$ip		= $_SERVER['REMOTE_ADDR'];
			$agent	= trim(strip_tags($_SERVER['HTTP_USER_AGENT']));

			$query = "UPDATE $wpdb->mp_users SET status = 'waiting', laststatus = '$now', laststatus_IP = '$ip', laststatus_agent = '$agent', laststatus_user_id = $userid WHERE id='$id';";
			$results = $wpdb->query( $query );
			if ($results == 1) 	return $now;
			else 				return false;
		}
		return true;
	}

	public static function delete($id) {
		global $wpdb;

		do_action('MailPress_delete_user',$id);

		$x = MP_User::has_subscribed_to_comments($id);
		if ($x)
		{
			$query = "SELECT post_id FROM $wpdb->postmeta    WHERE meta_key = '_MailPress_subscribe_to_comments_' and meta_value = '$id';";
			$posts = $wpdb->get_results( $query );
			foreach ($posts as $post) MailPress::update_stats('c',$post->post_id,-1);
			$query = "DELETE FROM $wpdb->postmeta    WHERE meta_key = '_MailPress_subscribe_to_comments_' and meta_value = '$id';";
			$results = $wpdb->query( $query );
		}

		if ('active' == MP_User::get_status($id)) 		MailPress::update_stats('u','active',-1);
		elseif ($x)							 	MailPress::update_stats('u','comment',-1);
		MailPress::update_stats('u','waiting',-1);

		$query = "DELETE FROM $wpdb->mp_users WHERE id = $id;";
		$results = $wpdb->query( $query );
		$query = "DELETE FROM $wpdb->mp_usermeta WHERE user_id = $id;";
		$results = $wpdb->query( $query );

		wp_cache_delete($id, 'mp_user');
		return true;
	}


	public static function is_user($email='', $userID=null) {
		if ( '' != $email && '' != MP_User::get_status_by_email($email) && 'delete' != MP_User::get_status_by_email($email) ) return true; 
		return false;
	}

	public static function has_subscribed_to_comments($id) {
		global $wpdb;
		return $wpdb->get_var("SELECT count(*) FROM $wpdb->postmeta WHERE meta_key = '_MailPress_subscribe_to_comments_' AND meta_value = '$id';");
	}

	public static function get_id($key) {
		global $wpdb;
		return $wpdb->get_var("SELECT id FROM $wpdb->mp_users WHERE confkey = '$key';");
	}

	public static function get_email($id) {
		global $wpdb;
		return $wpdb->get_var("SELECT email FROM $wpdb->mp_users WHERE id = '$id';");
	}

	public static function get_id_by_email($email) {
		global $wpdb;
		return $wpdb->get_var("SELECT id FROM $wpdb->mp_users WHERE email = '$email';");
	}

	public static function get_status($id) {
      	global $wpdb;
	      $result = $wpdb->get_var("SELECT status FROM $wpdb->mp_users WHERE id='$id' LIMIT 1");
		return ($result == NULL) ? 'deleted' : $result;
	}

	public static function get_status_by_email($email) {
		global $wpdb;
		return $wpdb->get_var("SELECT status FROM $wpdb->mp_users WHERE email = '$email'");
	}

	public static function get_key_by_email($email) {
		global $wpdb;
		return $wpdb->get_var("SELECT confkey FROM $wpdb->mp_users WHERE email = '$email'");
	}

	function set_status($id, $status) {
		switch($status) 
		{
			case 'active':
					return MP_User::activate($id);
			break;
			case 'waiting':
					return MP_User::deactivate($id);
			break;
			case 'delete':
					return MP_User::delete($id);
			break;
		}
		return true;
	}

	function get_ip2country($ip)
	{
		$x = @file_get_contents("http://api.hostip.info/country.php/?ip=$ip");
		if ('XX' == $x)
		{
			$x = @file_get_contents("http://www.infosniper.net/xml.php?ip_address=$ip");
			if ($x)
			{
				$xml = new SimpleXMLElement ( $x );
				if (($xml->result[0]->countrycode) && (2 == strlen($xml->result[0]->countrycode)))
					return strtoupper($xml->result[0]->countrycode);
			}
		 	return 'ZZ';
		}
		return $x;
	}

	function get_ip2USstate($ip)
	{
		$x = @file_get_contents("http://api.hostip.info/get_html.php?ip=$ip");
		if (2 < strlen($x)) 	return substr($x,strlen($x)-2,2);
		else 				return 'ZZ';
	}


	function get_comment_subs($id) {
		global $wpdb;

		$query = "SELECT a.meta_id, a.post_id, b.post_title FROM $wpdb->postmeta a, $wpdb->posts b WHERE a.meta_key = '_MailPress_subscribe_to_comments_' AND a.meta_value = '$id' AND a.post_id = b.ID;";
		return $wpdb->get_results( $query );
	}



    public static function add($email) {
		$return = array();
		$defaults = MailPress::form_defaults();

		if ( !MailPress::is_email($email) )
		{
			$return['result']  = false;
			$return['message'] = $defaults['txtvalidemail'];
			return $return;
		}
		
		$status = MP_User::get_status_by_email($email);									//Test if subscription already exists

		switch ($status)
		{
			case ('active') :
				$return['result']  = false;
				$return['message'] = $defaults['txtallready'];
				return $return;
			break;
			case ('waiting') :
				if ( MailPress::send_confirmation_subscription($email,MP_User::get_key_by_email($email)) )
				{
					$return['result']  = true;
					$return['message'] = $defaults['txtwaitconf'] . ' <small>(2)</small>';
				}
				else
				{
					$return['result']  = false;
					$return['message'] = $defaults['txterrconf'] . ' <small>(2)</small>';
				}
				return $return;
			break;
			default :
				$key = md5(uniqid(rand(),1));													//generate key
				if ( MailPress::send_confirmation_subscription($email,$key) )							//email was sent
				{
					if ( MP_User::insert($email, $key) )
					{
						$return['result']  = true;
						$return['message'] = $defaults['txtwaitconf'] ;
						return $return;
					}
				}
				$return['result']  = false;
				$return['message'] = $defaults['txterrconf'];
				return $return;
			break;
		}
	}


////	MP_User user meta functions	////
////	MP_User user meta functions	////
////	MP_User user meta functions	////

	public static function has_meta( $mp_user_id ) 
	{
		global $wpdb;

		return $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->mp_usermeta WHERE user_id = %d ORDER BY meta_key, umeta_id", $mp_user_id ), ARRAY_A );
	}

	public static function get_meta_by_id( $mid ) 
	{
		global $wpdb;
		$mid = (int) $mid;
	
		$meta = $wpdb->get_row( $wpdb->prepare("SELECT * FROM $wpdb->mp_usermeta WHERE umeta_id = %d", $mid) );
		if ( is_serialized_string( $meta->meta_value ) )	$meta->meta_value = maybe_unserialize( $meta->meta_value );
		return $meta;
	}

	public static function delete_meta( $mp_user_id, $meta_key, $meta_value = '' ) 
	{
		global $wpdb;
		if ( !is_numeric( $mp_user_id ) ) return false;
		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);

		if ( is_array($meta_value) || is_object($meta_value) ) $meta_value = serialize($meta_value);
		$meta_value = trim( $meta_value );

		if ( ! empty($meta_value) ) 	$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->mp_usermeta WHERE user_id = %d AND meta_key = %s AND meta_value = %s", $mp_user_id, $meta_key, $meta_value) );
		elseif ( ! empty($meta_key) ) $wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->mp_usermeta WHERE user_id = %d AND meta_key = %s", $mp_user_id, $meta_key) );
		else					$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->mp_usermeta WHERE user_id = %d", $mp_user_id) );

		return true;
	}

	public static function delete_meta_by_id( $mid ) 
	{
		global $wpdb;
		if ( !is_numeric( $mid ) ) return false;

		$wpdb->query( $wpdb->prepare("DELETE FROM $wpdb->mp_usermeta WHERE umeta_id = %d", $mid) );

		return true;
	}

	public static function get_meta( $mp_user_id, $meta_key = '', $meta_value = '') 
	{
		global $wpdb;
		$mp_user_id = (int) $mp_user_id;

		if ( !$mp_user_id ) return false;

		if ( !empty($meta_key) ) 
		{
			$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);
			if ( !empty($meta_value) ) 
			{
				$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->mp_usermeta WHERE user_id = %s AND meta_key = %s AND meta_value = %s", $mp_user_id, $meta_key, $meta_value) );
			}
			else
			{
				$metas = $wpdb->get_col( $wpdb->prepare("SELECT meta_value FROM $wpdb->mp_usermeta WHERE user_id = %d AND meta_key = %s", $mp_user_id, $meta_key) );
			}
		}
		else
		{
			$metas = $wpdb->get_results( $wpdb->prepare("SELECT meta_key, meta_value FROM $wpdb->mp_usermeta WHERE user_id = %d", $mp_user_id) );
		}

		if ( empty($metas) ) 
		{
		 	if ( empty($meta_key) ) return array();
			else			return '';
		}

		$metas = array_map('maybe_unserialize', $metas);

		if ( count($metas) == 1 ) 	return $metas[0];
		else				return $metas;
	}

	public static function add_meta( $mp_user_id, $meta_key, $meta_value ) 
	{
		global $wpdb;
		if ( !is_numeric( $mp_user_id ) ) return false;
		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);

// FIXME: mp_usermeta data is assumed to be already escaped
		if ( is_string($meta_value) )$meta_value = stripslashes($meta_value);
		$meta_value = maybe_serialize($meta_value);

		if (empty($meta_value)) return MP_User::delete_meta($mp_user_id, $meta_key);

		$wpdb->query( $wpdb->prepare("INSERT INTO $wpdb->mp_usermeta ( user_id, meta_key, meta_value ) VALUES ( %d, %s, %s )", $mp_user_id, $meta_key, $meta_value) );

		return $wpdb->insert_id;
	}

	public static function update_meta($mp_user_id, $meta_key, $meta_value, $prev_value = '') 
	{
		global $wpdb;

		// expected_slashed ($meta_key)
		$meta_key = stripslashes($meta_key);
		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);

		if ( ! $wpdb->get_var( $wpdb->prepare( "SELECT meta_key FROM $wpdb->mp_usermeta WHERE meta_key = %s AND user_id = %d", $meta_key, $mp_user_id ) ) ) {
			return MP_User::add_meta($mp_user_id, $meta_key, $meta_value);
		}

		$meta_value = maybe_serialize($meta_value);

		$data  = compact( 'meta_value' );
		$where = compact( 'meta_key', 'user_id' );

		if ( !empty( $prev_value ) ) 
		{
			$prev_value = maybe_serialize($prev_value);
			$where['meta_value'] = $prev_value;
		}

		$wpdb->update( $wpdb->mp_usermeta, $data, $where );
		return true;
	}

	public static function update_meta_by_id($umeta_id, $meta_key, $meta_value) 
	{
		global $wpdb;
		if ( !is_numeric( $umeta_id ) ) return false;

		$meta_value = maybe_serialize($meta_value);
		$meta_key = preg_replace('|[^a-z0-9_]|i', '', $meta_key);

		$data  = compact( 'meta_key', 'meta_value' );
		$where = compact( 'umeta_id' );

		$wpdb->update( $wpdb->mp_usermeta, $data, $where );
		return true;
	}

/// MAILING LISTS


	public static function get_mailing_lists()
	{
		$draft_dest = array (	''  => '&nbsp;',
						'1' => __('active blog','MailPress'), 
						'2' => __('active comments','MailPress'), 
						'3' => __('active blog + comments','MailPress'), 
						'4' => __('active + not active','MailPress') 
					  );
		return apply_filters('MailPress_mailing_lists',$draft_dest);
	}

	public static function get_mailing_lists_query($draft_toemail)
	{
		global $wpdb;

		$query = false;
		switch ($draft_toemail)
		{
			case '1' :
				$query  = "SELECT id, email, status, confkey FROM $wpdb->mp_users WHERE status = 'active';";
			break;
			case '2' :
				$query  = "SELECT DISTINCT id, email, status, confkey FROM $wpdb->mp_users a, $wpdb->postmeta b WHERE a.id = b.meta_value and b.meta_key = '_MailPress_subscribe_to_comments_';";
			break;
			case '3' :
				$query  = "SELECT id, email, status, confkey FROM $wpdb->mp_users WHERE status = 'active'";
				$query .= " UNION ";
				$query .= "SELECT DISTINCT id, email, status, confkey FROM $wpdb->mp_users a, $wpdb->postmeta b WHERE a.id = b.meta_value and a.status = 'waiting' and b.meta_key = '_MailPress_subscribe_to_comments_';";
			break;
			case '4' :
				$query  = "SELECT id, email, status, confkey FROM $wpdb->mp_users ;";
			break;
			default :
				if (has_filter('MailPress_mailing_lists_query')) $query = apply_filters('MailPress_mailing_lists_query',$draft_toemail);
			break;
		}
		return $query;
	}

	public static function get_newsletters_query($id,$in = 'NOT') {
		global $wpdb;
		$query = "	SELECT DISTINCT a.id, a.email, a.status, a.confkey 
				FROM 	$wpdb->mp_users a 
				WHERE status = 'active' 
				AND 	$in EXISTS 	(
								SELECT DISTINCT b.user_id 
								FROM 	$wpdb->mp_usermeta b 
								WHERE b.meta_key = '_MailPress_newsletter' 
								AND 	b.meta_value = '$id' 
								AND 	b.user_id = a.id
							) ";

		$query = apply_filters('MailPress_newsletters_query',$query,$id);
		$query = apply_filters('MailPress_newsletters_query_' . $id,$query);

		return $query;
	}


/// RECIPIENTS ///


	public static function get_recipients($query,$mail_id)
	{
		global $wpdb;
		$users 	= $wpdb->get_results( $query );

		if ($users)
		{
			$replacements  	= array ();
			foreach($users as $user) 
			{
				$replacements [$user->email] 	= array ( 	'{{toemail}}'       => $user->email ,
                                                            '{{unsubscribe}}'   => MP_User::get_unsubscribe_url($user->confkey) ,
                                                            '{{viewhtml}}'      => MP_User::get_view_url($user->confkey,$mail_id)
                                                    );
				$replacements [$user->email] 	= apply_filters('MailPress_get_recipients',$replacements [$user->email],$user);
			}
			return $replacements;
		}
		else return array();
	}

	public static function get_meta_recipients($replacements,$user) 
	{
		$metas = MP_User::get_meta( $user->id );
		
		if (!is_array($metas)) $metas = array($metas);

		foreach ($metas as $meta)
		{
			if ($meta->meta_key[0] == '_') continue;

			$replacements['{{' . $meta->meta_key. '}}'] = $meta->meta_value;
		}
		return $replacements;
	}


/// MAIL URLs ///


	public static function get_subscribe_url($key)
	{
		global $mp_general;
		if ('ajax' == $mp_general['subscription_mngt'])	$x = get_option('siteurl') . '/' . MP_PATH . 'mp-includes/action.php?action=mail_link&add=' . $key;
		else                                            $x = get_option('home') . '/?' . $mp_general['subscription_mngt'] . '=' . $mp_general['id'] . '&add=' . $key ;
		return $x;
	}

	public static function get_unsubscribe_url($key)
	{
		global $mp_general;
		if ('ajax' == $mp_general['subscription_mngt'])	$x = get_option('siteurl') . '/' . MP_PATH . 'mp-includes/action.php?action=mail_link&del=' . $key;
		else                                            $x = get_option('home') . '/?' . $mp_general['subscription_mngt'] . '=' . $mp_general['id'] . '&del=' . $key ;
		return $x;
	}

	public static function get_delall_url($key)
	{
		global $mp_general;
		if ('ajax' == $mp_general['subscription_mngt'])	$x = get_option('siteurl') . '/' . MP_PATH . 'mp-includes/action.php?action=mail_link&delall=' . $key;
		else                                            $x = get_option('home') . '/?' . $mp_general['subscription_mngt'] . '=' . $mp_general['id'] . '&delall=' . $key ;
		return $x;
	}

	public static function get_view_url($key,$id)
	{
		global $mp_general;
		if ('ajax' == $mp_general['subscription_mngt'])	$x = get_option('siteurl') . '/' . MP_PATH . 'mp-includes/action.php?action=mail_link&view=' . $key . '&id=' . $id ;
		else                                            $x = get_option('home') . '/?' . $mp_general['subscription_mngt'] . '=' . $mp_general['id'] . '&view=' . $key . '&id=' . $id ;
		return $x;
	}

	public static function get_wp_user_unsubscribe_url()
	{
		$url = false;
		$email = MailPress::get_wp_user_email();
		if (!empty($email)) if (MP_User::get_key_by_email($email)) $url = MP_User::get_unsubscribe_url(MP_User::get_key_by_email($email) );
		return $url;
	}


/// SUBSCRIPTION MANAGEMENT ///


	public static function mp_action_mail_link() {

		include(MP_TMP . '/mp-includes/mp-mail-links.php');
		$results = mp_mail_links();

		if (isset($_GET['view']))
		{
			@header('Content-Type: ' . get_option('html_type') . '; charset=' . get_option('blog_charset'));
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" <?php do_action('admin_xml_ns'); ?> <?php language_attributes(); ?>>
	<head profile="http://gmpg.org/xfn/11">
		<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php echo get_option('blog_charset'); ?>" />
		<title><?php echo $results ['title']; ?></title>
		<script type='text/javascript' src='<?php echo get_option('siteurl') . '/' . MP_PATH . 'mp-includes/js/iframe.js' ?>'></script>
	</head>
	<body>
		<div>
			<div>
				<b><?php echo $results ['title']; ?></b>
			</div>
			<?php echo $results ['content']; ?>
		</div>
	</body>
</html>
<?php
		}
		else
		{
			get_header();
?>
	<div id='content' class='widecolumn'>
		<div>
			<h2><?php echo $results ['title']; ?></h2>
			<div>
				<?php echo $results ['content']; ?>
			</div>
		</div>
	</div>
<?php
			get_footer();
		}
	}


/// AJAX ///


	public static function mp_action_add_user_fo() {

		$bots_useragent = array('googlebot', 'google', 'msnbot', 'ia_archiver', 'lycos', 'jeeves', 'scooter', 'fast-webcrawler', 'slurp@inktomi', 'turnitinbot', 'technorati', 'yahoo', 'findexa', 'findlinks', 'gaisbo', 'zyborg', 'surveybot', 'bloglines', 'blogsearch', 'ubsub', 'syndic8', 'userland', 'gigabot', 'become.com');
		$useragent = $_SERVER['HTTP_USER_AGENT'];
		foreach ($bots_useragent as $bot) if (stristr($useragent, $bot) !== false) return false;				// goodbye bot !

		$defaults = MailPress::form_defaults();
		$email = ( isset($_POST['email']) ) ? $_POST['email'] : '';									//has the user entered an email 

		if ( '' == $email || $defaults['txtfield'] == $email ) 
		{																		// check for bot
			$message = "<span class='error'>" . $defaults['txtwait'] . "</span>";
			$email = $defaults['txtfield'];
		}
		else
		{
			$add = MP_User::add($email);
			$shortcode_message = apply_filters('MailPress_form_submit','',$email);
			$message = ($add['result']) ? "<span class='success'>" . $add['message'] . $shortcode_message . "</span>" : "<span class='error'>" . $add['message'] . $shortcode_message . "</span>";
			$email   = ($add['result']) ? $email : $defaults['txtfield'];
		}
		ob_end_clean();
		header('Content-Type: text/xml');
		echo "<?xml version='1.0' standalone='yes'?><wp_ajax><message><![CDATA[$message]]></message><email><![CDATA[$email]]></email></wp_ajax>";
		die();
	}

	public static function mp_action_delete_user() {
		$id = isset($_POST['id'])? (int) $_POST['id'] : 0;
		$r = MP_User::set_status( $id, 'delete' );
		die( $r ? '1' : '0' );
	}

	public static function mp_action_dim_user() {
		$id = isset($_POST['id'])? (int) $_POST['id'] : 0;
		switch (MP_User::get_status($id))
		{
			case 'waiting' : 
				$now =  MP_User::set_status( $id, 'active' );

				if ($now) 
				{
					$t_time = mysql2date(__('Y/m/d g:i:s A'),$now);
					$m_time = $now;
					$time   = mysql2date(__('U'),$now);

					$time_diff = time() - $time; 

					if ( $time_diff > 0 && $time_diff < 24*60*60 )	$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );
					elseif ( $time_diff == 0 )				$h_time = __('now','MailPress');
					else								$h_time = mysql2date(__('Y/m/d'), $m_time);

					ob_end_clean();
					header('Content-Type: text/xml');
					echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";
					echo "<id><![CDATA[$id]]></id>";
					echo "<now><![CDATA[$t_time]]></now>";
					echo "<time><![CDATA[$h_time]]></time>";
					echo '</wp_ajax>';
					die();
				}
			break;
			case 'active'   : 
				$now =  MP_User::set_status( $id, 'waiting' );

				if ($now) 
				{
					$t_time = mysql2date(__('Y/m/d g:i:s A'),$now);
					$m_time = $now;
					$time   = mysql2date(__('U'),$now);

					$time_diff = time() - $time; 

					if ( $time_diff > 0 && $time_diff < 24*60*60 )	$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );
					elseif ( $time_diff == 0 )				$h_time = __('now','MailPress');
					else								$h_time = mysql2date(__('Y/m/d'), $m_time);

					ob_end_clean();
					header('Content-Type: text/xml');
					echo "<?xml version='1.0' standalone='yes'?><wp_ajax>";
					echo "<id><![CDATA[$id]]></id>";
					echo "<now><![CDATA[$t_time]]></now>";
					echo "<time><![CDATA[$h_time]]></time>";
					echo '</wp_ajax>';
					die();
				}
			break;
			default :
				die('0');
			break;
		}
		die('-1');
	}

	public static function mp_action_add_user() {
		$url_parms = MP_Admin::get_url_parms(array('mode','status','s'));

		$start = isset($_POST['apage']) ? intval($_POST['apage']) * 25 - 1: 24;

		list($users, $total) = MP_User::get_list( $url_parms, $start, 1 );

		if ( !$users ) die('1');

		$x = new WP_Ajax_Response();
		foreach ( (array) $users as $user ) {
			MP_User::get( $user );
			ob_start();
				MP_User::get_row( $user->id, $url_parms, false );
				$user_list_item = ob_get_contents();
			ob_end_clean();
			$x->add( array(
				'what' 	=> 'user',
				'id' 		=> $user->id,
				'data' 	=> $user_list_item
			) );
		}
		$x->send();
	}


////	mailpress_users	////

	public static function alphabet()
	{
		global $wpdb;
		$x = array();

		$query = "SELECT DISTINCT UPPER(SUBSTRING(email,1,1)) as letter FROM $wpdb->mp_users ORDER BY 1;";
		$letters = $wpdb->get_results( $query );

		foreach ($letters as $letter) $x[] = $letter->letter;

		return $x;
	}


	public static function manage_list_columns() {
		$users_columns = array(	'cb' 		=> '<input type="checkbox" />',
						'title' 	=> __('E-mail','MailPress'),
						'author' 	=> __('Author'),
						'date'	=> __('Date'));
		$users_columns = apply_filters('MailPress_manage_users_columns', $users_columns);
		return $users_columns;
	}

	public static function count() {
		global $wpdb;
		$stats = array('waiting' => 0, 'active' => 0);

		$query = "SELECT status, COUNT( * ) AS count FROM $wpdb->mp_users GROUP BY status";
		$counts = $wpdb->get_results( $query );

		if ($counts) foreach( $counts as $count ) $stats[$count->status] = $count->count;

		return (object) $stats;
	}

	public static function get_list( $url_parms, $start, $num ) {
		global $wpdb;
		$start = abs( (int) $start );
		$num = (int) $num;
		$order = "a.created";

		$where = $tables = '';
		if (isset($url_parms['s']) && !empty($url_parms['s']))
		{
			$s = $wpdb->escape($url_parms['s']);
			if (!empty($where)) $where = $where . ' AND ';
			if ($s) $where .= " (a.email LIKE '%$s%') OR (a.laststatus_IP = '%$s%') OR (a.created_IP like '%$s%')  "; 
		}
		if (isset($url_parms['status']) && !empty($url_parms['status']))
		{
			if (!empty($where)) $where = $where . ' AND ';
			$where .= "a.status = '" . $url_parms['status'] . "'";
		}
		if (isset($url_parms['author']) && !empty($url_parms['author']))
		{
			if (!empty($where)) $where = $where . ' AND ';
			$where .= "( a.created_user_id = " . $url_parms['author'] . "  OR a.laststatus_user_id = " . $url_parms['author'] . " ) ";
		}
		if (isset($url_parms['mailinglist']) && !empty($url_parms['mailinglist']))
		{
			if (!empty($where)) $where = $where . ' AND ';

			$y = get_mailinglist_children($url_parms['mailinglist'], ',', '');
			$x = ('' == $y) ? ' = ' . $url_parms['mailinglist'] : ' IN (' . $url_parms['mailinglist'] . $y . ') ';
 
			$tables .= ", $wpdb->term_taxonomy b, $wpdb->term_relationships c";
			$where .= "( b.taxonomy='MailPress_mailing_list' AND b.term_taxonomy_id=c.term_taxonomy_id AND b.term_id " . $x . "  AND a.id = c.object_id)";
		}
		if (isset($url_parms['startwith']) && !empty($url_parms['startwith']))
		{
			if (!empty($where)) $where = $where . ' AND ';
			$where .= "(a.email >= '" . $url_parms['startwith'] . "') ";
			$order = "a.email";
		}

		if ($where) $where = ' WHERE ' . $where;

		$users = $wpdb->get_results( "SELECT DISTINCT SQL_CALC_FOUND_ROWS a.id, a.email, a.status, a.confkey, a.created, a.created_IP, a.created_agent, a.created_user_id, a.created_country, a.created_US_state, a.laststatus, a.laststatus_IP, a.laststatus_agent, a.laststatus_user_id FROM $wpdb->mp_users a $tables $where ORDER BY $order LIMIT $start, $num" );

		MP_Admin::update_cache($users,'mp_user');

		$total = $wpdb->get_var( "SELECT FOUND_ROWS()" );

		return array($users, $total);
	}

	public static function get_row( $id, $url_parms, $checkbox = true ) {

		global $mp_user;
		global $mp_screen ;

		$mp_user = $user = MP_User::get( $id );
		$the_user_status = $user->status;
// url's
		$write_url 		= clean_url(MailPress_write . '&toemail=' . $user->email);
		$edit_url  		= MailPress_user . '&id=' . $user->id;
		$edit_url 		= (has_filter('MailPress_edit_user_url')) ? MP_Admin::url(apply_filters('MailPress_edit_user_url',$edit_url,$user->id),false,$url_parms) : MP_Admin::url($edit_url,false,$url_parms) ;
		$edit_url 		= clean_url($edit_url);
		$delete_url  	= clean_url(MP_Admin::url( MailPress_user	."&action=delete&id=$id",	"delete-user_$id" ,	$url_parms ));
		$activate_url 	= clean_url(MP_Admin::url( MailPress_user	."&action=activate&id=$id",	"activate-user_$id",	$url_parms ));
		$deactivate_url 	= clean_url(MP_Admin::url( MailPress_user	."&action=deactivate&id=$id",	"deactivate-user_$id",	$url_parms ));

		$x 			= $url_parms['s'];
		$url_parms['s'] 	= MP_User::get_user_author_IP();
		$ip_url 		= clean_url(MP_Admin::url( MailPress_users, false, $url_parms ));
		$url_parms['s'] 	= $x;

		$author = ( 0 == $user->laststatus_user_id) ? $user->created_user_id : $user->laststatus_user_id;
		if ($author != 0 && is_numeric($author)) {
			unset($url_parms['author']);
			$wp_user = get_userdata($author);
			$author_url 	= clean_url(MP_Admin::url( MailPress_users  	."&author=" . $author, false, $url_parms ));
		}

		$actions = array();

		$actions['edit']      = "<a href='$edit_url' title='" . sprintf( __('Edit "%1$s"','MailPress') , htmlspecialchars($user->email, ENT_QUOTES) ) . "'>" . __('Edit') . '</a>';
		$actions['write']     = "<a href='$write_url' title='" . sprintf( __('Write to "%1$s"','MailPress') , htmlspecialchars($user->email, ENT_QUOTES) ) . "'>" . __('Write','MailPress') . '</a>';
		$actions['approve']   = "<a href='$activate_url' 	class='dim:the-user-list:user-$id:unapproved:e7e7d3:e7e7d3:?mode=" . $url_parms['mode'] . "' title='" . sprintf( __('Activate "%1$s"','MailPress') , htmlspecialchars($user->email, ENT_QUOTES) ) . "'>" . __( 'Activate','MailPress' ) 	. '</a>';
		$actions['unapprove'] = "<a href='$deactivate_url' 	class='dim:the-user-list:user-$id:unapproved:e7e7d3:e7e7d3:?mode=" . $url_parms['mode'] . "' title='" . sprintf( __('Deactivate "%1$s"','MailPress') , htmlspecialchars($user->email, ENT_QUOTES) ) . "'>" . __( 'Deactivate','MailPress' ) 	. '</a>';

		if ( 'waiting' == $url_parms['status']) 
		{
			$actions['approve']   = "<a href='$activate_url' class='delete:the-user-list:user-$id:e7e7d3:action=dim-user'   title='" . __( 'Activate this user','MailPress' )   . "'>" . __( 'Activate','MailPress' ) 	. '</a>';
			unset($actions['unapprove']);
		}
		elseif ( 'active' == $url_parms['status']) 
		{
			$actions['unapprove'] = "<a href='$deactivate_url' class='delete:the-user-list:user-$id:e7e7d3:action=dim-user' title='" . __( 'Deactivate this user','MailPress' ) . "'>" . __( 'Deactivate','MailPress' ) . '</a>';
			unset($actions['approve']);
		}

		if (current_user_can('MailPress_delete_users'))
		{
			$actions['delete']    = "<a href='$delete_url' class='delete:the-user-list:user-$id submitdelete' title='" . __('Delete this user','MailPress' ) . "'>" . __('Delete','MailPress') . '</a>';
		}

		$class = ('waiting' == $the_user_status) ? 'unapproved' : '';

		$email_display = $user->email;
		if ( strlen($email_display) > 40 )	$email_display = substr($email_display, 0, 39) . '...';


?>
	<tr id="user-<?php echo $id; ?>" class='<?php echo $class; ?>'>
<?php

		$users_columns = MP_User::manage_list_columns();
		$hidden = (array) get_user_option( "manage" . $mp_screen . "columnshidden" );

		foreach ( $users_columns as $column_name=>$column_display_name ) 
		{
			$class = "class=\"$column_name column-$column_name\"";

			$style = '';
			if ( in_array($column_name, $hidden) ) $style = ' style="display:none;"';

			$attributes = "$class$style";

			switch ($column_name) 
			{

				case 'cb':
					if ( $checkbox ) : 
?>
		<th class='check-column' scope='row'>
			<input type='checkbox' name='delete_users[]' value='<?php echo $id; ?>' />
		</th>
<?php
	 				endif;
				break;
				case 'title' :
					$attributes = 'class="username column-username"' . $style;
?>
		<td  <?php echo $attributes ?>>
<?php if (('detail' == $url_parms['mode']) && (get_option('show_avatars'))) echo get_avatar( $user->email, 32 ); else MP_User::flag_IP() ?>
					<strong>
						<a class='row-title' href='<?php echo $edit_url; ?>' title='<?php printf( __('Edit "%1$s"','MailPress') , htmlspecialchars($user->email, ENT_QUOTES) ); ?>'>
							<?php echo $email_display; ?>
						</a>
					</strong>
<?php
		if ('detail' == $url_parms['mode'])
		{
?>
					<br/>
<!--
					<a href='<?php echo $ip_url; ?>'>
						&nbsp;
						<?php MP_User::user_author_IP() ?>
					</a>
-->
<?php
		}
		$action_count = count($actions);
		$i = 0;
		echo "<div class='row-actions'>\n";
		foreach ( $actions as $action => $link ) {
			++$i;
			( $i == $action_count ) ? $sep = '' : $sep = ' | ';
			echo "<span class='$action'>$link$sep</span>\n";
		}
		echo "</div>\n";
?>
		</td>
<?php
				break;
				case 'date' :

					$t_time = MP_User::get_user_date(__('Y/m/d g:i:s A'));
					$m_time = MP_User::get_user_date_raw();
					$time   = MP_User::get_user_date('U');

					$time_diff = time() - $time; 

					if ( $time_diff > 0 && $time_diff < 24*60*60 )	$h_time = sprintf( __('%s ago'), human_time_diff( $time ) );
					elseif ( $time_diff == 0 )				$h_time = __('now','MailPress');
					else								$h_time = mysql2date(__('Y/m/d'), $m_time);
?>
		<td  <?php echo $attributes ?>>
			<abbr title="<?php echo $t_time; ?>"><?php echo $h_time; ?></abbr>
		</td>
<?php
				break;
				case 'author' :
?>
		<td  <?php echo $attributes ?>>	
<?php 	if ($author != 0 && is_numeric($author)) { ?>
				<a href='<?php echo $author_url; ?>' title='<?php printf( __('Users by "%1$s"','MailPress'), $wp_user->display_name); ?>'><?php echo $wp_user->display_name; ?></a>
<?php 	} else  	_e("(unknown)",'MailPress'); ?>
		</td>
<?php
				break;
				default:
?>
		<td  <?php echo $attributes ?>>
			<?php	do_action('MailPress_manage_users_custom_column', $column_name, $user, $url_parms); ?>
		</td>
<?php
				break;
			}
		}
?>
	</tr>
<?php
	}

	public static function user_date( $d = '' ) {
		echo MP_User::get_user_date( $d );
	}

	public static function get_user_date( $d = '' ) {
		$x = MP_User::get_user_date_raw();
		return ( '' == $d ) ? mysql2date( get_option('date_format'), $x) : mysql2date($d, $x);

	}

	public static function get_user_date_raw() {
		global $mp_user;
		return ( $mp_user->created >= $mp_user->laststatus) ? $mp_user->created : $mp_user->laststatus;
	}

	public static function user_author_IP() {
		echo MP_User::get_user_author_IP();
	}

	public static function get_user_author_IP() {
		global $mp_user;
		$ip = ( '' == $mp_user->laststatus_IP) ? $mp_user->created_IP : $mp_user->laststatus_IP;
		return $ip;
	}

	public static function flag_IP() {
		echo MP_User::get_flag_IP();
	}

	public static function get_flag_IP() {
		global $mp_user;
		return ('ZZ' == $mp_user->created_country) ? '' : "<img class='flag' alt='" . strtolower($mp_user->created_country) . "' src='" . get_option('siteurl') . '/' . MP_PATH . '/mp-includes/images/flags/' . strtolower($mp_user->created_country) . ".gif'/>\n";
	}


////	mailpress_user	////


	public static function submit_meta_box($mp_user) 
	{
		$url_parms 	= MP_Admin::get_url_parms();
		if (current_user_can('MailPress_delete_users')) $delete_url = clean_url(MP_Admin::url(MailPress_user  ."&amp;action=delete&amp;id=$mp_user->id",false,$url_parms));
?>
<div class="submitbox" id="submitpost">
	<div id="minor-publishing">
		<div id="misc-publishing-actions">
			<br/><br/>
		</div>
		<div id="minor-publishing-actions">
		</div>
		<div class="clear"></div>
	</div>
	<div id="major-publishing-actions">
		<div id="delete-action">
<?php 	if ($delete_url) : ?>
			<a class='submitdelete' href='<?php echo $delete_url ?>' onclick="if (confirm('<?php echo(js_escape(sprintf( __("You are about to delete this MailPress user '%s'\n  'Cancel' to stop, 'OK' to delete.",'MailPress'), $mp_user->id ))); ?>')) return true; return false;">
				<?php _e('Delete','MailPress'); ?>
			</a>
<?php		endif; ?>
		</div>
		<div id="publishing-action">
			<input id='publish' type="submit" name='save' class='button-primary' value="<?php _e('Save','MailPress'); ?>"/>
		</div>
	<div class="clear"></div>
	</div>
</div>
<?php
	}

	public static function usermeta_meta_box($mp_user)
	{
?>
<div id="user-import">
<?php
		$header = true;
		$metas = MP_User::get_meta($mp_user->id);

		if ($metas)
		{
			if (!is_array($metas)) $metas = array($metas);

			foreach ($metas as $meta)
			{
				if ($meta->meta_key[0] == '_') continue;
	
				if ($header)
				{
					$header = false;
?>
	<table class='form-table'>
		<thead>
			<tr>
				<td style='border-bottom:none;padding:0px;width:20px;'>
				</td>
				<td style='border-bottom:none;padding:0px;'>
					<b><?php _e('Key') ?></b>
				</td>
				<td style='border-bottom:none;padding:0px;'>
					<b><?php _e('Value') ?></b>
				</td>
			</tr>
		</thead>
		<tbody>
<?php
				}
?>
			<tr>
				<td style='border-bottom:none;padding:0px;width:20px;'></td>
				<td style='border-bottom:none;line-height:0.8em;padding:0px;'>
					<input style='padding:3px;margin:0 10px 0 0;width:250px;' type='text' disabled='disabled' value="<?php echo $meta->meta_key; ?>"/>
				</td>
				<td style='border-bottom:none;line-height:0.8em;padding:0px;'>
					<input style='padding:3px;margin:0 10px 0 0;width:250px;' type='text' disabled='disabled' value="<?php echo $meta->meta_value; ?>"/>
				</td>
			</tr>
<?php
			}
		}
	
		if ($header) 	_e('No meta data','MailPress');
		else
		{
?>
			<tr>
				<td style='border-bottom:none;padding:0px;width:20px;'>&nbsp;</td>
				<td style='border-bottom:none;padding:0px;width:20px;'></td>
				<td style='border-bottom:none;padding:0px;width:20px;'></td>
			</tr>
		</tbody>
	</table>
<?php
		}
?>
</div>
<?php
	}
}
?>